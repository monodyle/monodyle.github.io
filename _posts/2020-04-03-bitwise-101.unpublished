---
layout: post
title: Một vài research về Bitwise
date: 2020-04-03 00:00
previewImage: /assets/images/posts/bitwise-101/featured.jpg
description:
tags: [dev, bitwise, til]
---

Dịch bệnh chuyển biến căng thẳng, công ty cho mình WFH[^1]. Cơ mà task của mình thì đang bị kẹt do phải chờ hàng xóm quăng cái API qua thì mình mới làm được. Thế là ngồi rảnh rỗi research một chút, tình cờ tìm đc mấy thứ hay ho về **Bitwise**.

[^1]: Work from home - Làm việc tại nhà

Lý do là hôm nọ trên **WeBuild**, có một ông anh đưa một bài toán: "Làm sao để cộng hai số nguyên", ờ thì đọc vế này có vẻ dễ, nhưng đọc vế tiếp theo mới thấy vê lờ: "nhưng không được dùng hai toán tử + và -".

## Bài toán từ con số 0

Thông thường, mình giải quyết một vấn đề (algorithm) sẽ đi từ cách *"quick and dirty"* trước. Thực ra cách này cũng gây ra nhiều tranh cãi, có người thích đi từ cơ bản như vậy, rồi từ từ giải quyết việc optimize perfomance sau (Ví dụ như các nhà tuyển dụng của FAANG), nhưng đồng thời cũng rất nhiều người không thích cách đi này vì nó quá tốn thời gian.

Nhưng mình quen rồi, và làm như vậy dễ quan sát vấn đề hơn, cũng phù hợp cho việc viết blog nữa nên mình sẽ áp dụng luôn cách này vào bài blog nhé :smug:

Giải quyết bài toán từ con số 0, tức là implement từ vế "Làm sao để cộng hai số nguyên", cái này rất dễ, trông nó sẽ như thế này, trẻ con nó cũng biết làm:

```rust
fn sum (x: i32, y: i32) -> i32 {
  x + y
}
```

Rồi, giờ thì làm sao để đưa cái function này về bài toán không dùng toán tử + và -?

Thử tư duy theo một hướng khác. Toán tử tương tác với số nguyên, thì chỉ có +, -, * và /. Nếu không được dùng + và -, thì đương nhiên cũng không có cách nào để * và / để có được kết quả cộng 2 số cả. Vậy sao không thử quy đổi về một hệ khác *decimal*?

Tương tác với số, chẳng phải *binary* là dễ nhất sao? Tự dưng sao quên khuấy mất mấy cái này, được học lâu rồi mà cũng chẳng bao giờ đụng tới, cuối cùng cũng có đất dụng võ :sad:

## Bitwise có gì?

Nếu nói về *binary*, thứ mà chỉ có `0` và `1` thì toán tử tương tác với nó lại vô cùng thú vị. Ấy thế mà đôi lúc chúng ta lại quên mất, chỉ quan tâm cái `AND` và `OR` vì chúng được dùng trong điều kiện.

Trên thực tế, bitwise cũng ít được sử dụng trong lập trình ứng dụng, nếu muốn thường xuyên gặp bitwise, thì chắc là lập trình nhúng hoặc là lập trình phần cứng.

Nhưng mà cũng không vì thế mà các bạn bỏ qua bitwise, tương tác với bit tuy hạn chế về mặt ứng dụng, nhưng tốc độ lại cực kỳ nhanh, nên đôi khi hãy thử chuyển bài toán về bitwise, chúng ta sẽ có một perfomance tốt hơn vì tài nguyên cần sử dụng ít hơn.

Thú thật hồi năm nhất đại học, ngoài cái `AND` và `OR`, mình chả biết mấy cái còn lại là cái gì, ứng dụng ra sao... Mãi sau này mới đụng phải một ít, nên cũng coi như là biết chút chút :cry: